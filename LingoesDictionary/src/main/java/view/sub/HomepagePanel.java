/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.sub;

import dao.WordDao;
import dao.WordDaoImpl;
import entities.Word;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JSplitPane;

/**
 *
 * @author USER
 */
public class HomepagePanel extends javax.swing.JPanel {

    private PanelCenter pnCenter;
    private JLabel lbWord;
    private JSplitPane splitPane;
    private JLabel[] lbWords;
    
    private List<Word> words;
    private final String pathToDataFile = getClass().getResource("/documents/Dictionary.txt").getFile();
    private final int maximumWordLength = 200;
    private final Font wordFont = new Font("Tahoma", Font.PLAIN, 16);
    private int indexOfCurLbWord = 0;
    private final Color normalColor = Color.BLACK;
    private final Color clickedColor = Color.LIGHT_GRAY;
    
    public HomepagePanel(JSplitPane splitPane) {
        this.splitPane = splitPane;
        
        WordDao wdao = new WordDaoImpl();
        File file = new File(pathToDataFile);
        words = wdao.getWords(file);
        
        initComponents();
        initComponentManuallys();
        
        lbWords = getLbWords();
    }
    
    private void initComponentManuallys() {
        pnCenter = new PanelCenter(this);
        
        JLabel tmpLabel = new JLabel("Word");
        int height = (tmpLabel.getPreferredSize().height + 5) * words.size();
        pnWords.setPreferredSize(new Dimension(pnWords.getPreferredSize().width, height));
        
        words.forEach((word) -> {
            lbWord = new JLabel(word.getVocabulary());
            JLabel lbWord = new JLabel(word.getVocabulary());
            lbWord.setPreferredSize(new Dimension(maximumWordLength, lbWord.getPreferredSize().height));
            lbWord.setName(indexOfCurLbWord + "");
            indexOfCurLbWord++;
            pnWords.add(lbWord);
            
            setEventLbWord(lbWord, word);
        });
        
        indexOfCurLbWord = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scpWords = new javax.swing.JScrollPane();
        pnWords = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        pnWords.setMinimumSize(new java.awt.Dimension(100, 100));
        scpWords.setViewportView(pnWords);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scpWords, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scpWords)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnWords;
    private javax.swing.JScrollPane scpWords;
    // End of variables declaration//GEN-END:variables

    private void setEventLbWord(JLabel lbWord, Word word) {
        lbWord.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                pnCenter.setLbWord(lbWord.getText());
                
                lbWords[indexOfCurLbWord].setForeground(normalColor);
                indexOfCurLbWord = Integer.parseInt(lbWord.getName());
                lbWord.setForeground(clickedColor);
                
                PanelCenter pnCenter = (PanelCenter) splitPane.getRightComponent();
                pnCenter.loadWord(word);
            }
            
        });
    }

    private JLabel[] getLbWords() {
        JLabel[] lbWords = new JLabel[words.size()];
        Component[] tmp = pnWords.getComponents();
        
        for(int i = 0; i < words.size(); i++) {
            lbWords[i] = (JLabel) tmp[i];
        }
        
        return lbWords;
    }
    
    public void searchWord(String text){
        for(JLabel lbWord : lbWords){
            if(lbWord.getText().startsWith(text)){
                // active MouseListener of this lbWord
                
                // then break this loop
                return;
            }
        }
        
        // if no lbWord contain text -> pnCenterCenter show no result
        pnCenter.loadNoResult();
    }
    
    public void searchFullWord(String text){
        for(int i = 0; i < words.size(); i++){
            if(words.get(i).getVocabulary().equals(text)){
                
            }
        }
    }
}